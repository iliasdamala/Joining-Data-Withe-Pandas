One to many relationship.  Primary key and foreign key relationship.  Within each ward there are many businesses.

We use the same syntax as the one to one merge for the left join.

>> Left join

# Left join editions and ioc_codes: hosts
hosts = pd.merge(editions, ioc_codes, how='left')

# Extract relevant columns and set index: hosts
hosts = hosts[['Edition','NOC']].set_index('Edition')

# Fix missing 'NOC' values of hosts
print(hosts.loc[hosts.NOC.isnull()])
hosts.loc[1972, 'NOC'] = 'FRG'
hosts.loc[1980, 'NOC'] = 'URS'
hosts.loc[1988, 'NOC'] = 'KOR'

# Reset Index of hosts: hosts
hosts = hosts.reset_index()

https://www.geeksforgeeks.org/python-pandas-dataframe-reset_index/

#Pandas reset_index() is a method to reset index of a Data Frame. reset_index() method sets a list of integer ranging from 0 to length of data as index. 



>>>>Sample >>> left join >> group by and sort

# Merge the licenses and biz_owners table on account
licenses_owners = pd.merge(licenses,biz_owners, on="account")

# Group the results by title then count the number of accounts
counted_df = licenses_owners.groupby("title").agg({'account':'count'})

# Sort the counted_df in desending order
sorted_df = counted_df.sort_values(by='account', ascending=False)

# Use .head() method to print the first few rows of sorted_df
print(sorted_df)


>>>>>>>>>How to merge more than two tables together


grant and license

joined by address and zipcode

grants_licenses = grants.merge(licenses, on=['address','zip'])

>>>>chaining


grants_licenses = grants.merge(licenses, on=['address','zip']) \
	.merge(wards, on='ward', suffixes('_bus','_ward')

\ is the continuation syntax, otherwise python will throw an error parsing the .merge as a separate line syntax

import matplotlib.pyplot as plt

grant_licenses_ward.groupby('ward').agg('sum').plot(kind='bar', y='grant')


>>>>Sample >>> merge using chain

# Merge the ridership and cal tables
ridership_cal = ridership.merge(cal, on=['year','month','day']) \
    .merge(stations,on='station_id')
print(ridership_cal.head())


>>>>Sample >> add filter

filter_criteria = ((ridership_cal_stations['month'] == 7) 
                   & (ridership_cal_stations['day_type'] == 'Weekday') 
                   & (ridership_cal_stations['station_name'] == 'Wilson'))

# Use .loc and the filter to select for rides
print(ridership_cal_stations.loc[filter_criteria, 'rides'].sum())

>>>>Sample >>> group by and sort

# Merge licenses and zip_demo, on zip; and merge the wards on ward
licenses_zip_ward = licenses.merge(zip_demo, on='zip') \
            			.merge(wards, on='ward')

print(zip_demo.columns)
# Print the results by alderman and show median income
print(licenses_zip_ward.groupby('alderman').agg({'income':'median'}) \
 .sort_values(by='income',ascending=False))

>>>> Sample >> multiple groupings

# Merge land_use and census and merge result with licenses including suffixes
land_cen_lic = land_use.merge(census, on='ward') \
                    .merge(licenses, on='ward', suffixes=('_cen','_lic'))

# Group by ward, pop_2010, and vacant, then count the # of accounts
pop_vac_lic = land_cen_lic.groupby(['ward','pop_2010','vacant'], 
                                   as_index=False).agg({'account':'count'})

# Sort pop_vac_lic and print the results
sorted_pop_vac_lic = pop_vac_lic.sort_values(['vacant', 'account', 'pop_2010'], 
                                             ascending=[False, True, True])

# Print the top few rows of sorted_pop_vac_lic
print(sorted_pop_vac_lic.head())


>>>>>>>>>>>>Left join
1. all records in the left table and only rows in the right table with matches

movies= pd.read_csv('tmb_movies.csv')


hosts = pd.merge(editions, ioc_codes, how='left')

encoding = "ISO-8859-1"

https://github.com/innat/IMDB-Analysis/blob/gh-pages/Jupyter%20Notebooks/MostRatedGenres.ipynb

https://raw.githubusercontent.com/fivethirtyeight/data/master/bechdel/


movies_taglines= movies.merge(taglines, on='id', how='left')
print(movies_taglines.head())

print(movies_taglines.shape)


>>>Sample >>> Movies and financials

# Merge movies and financials with a left join
movies_financials = movies.merge(financials, on='id',how='left')

# Count the number of rows in the budget column that are missing
number_of_missing_fin = movies_financials['budget'].isnull().sum()

# Print the number of movies missing financials
print(number_of_missing_fin)


#left join will return null for right table records with no matches


>>>> Sample >> Toy story left merge

# Merge the toy_story and taglines tables with a left join
toystory_tag = toy_story.merge(taglines,on='id', how='left')

# Print the rows and shape of toystory_tag
print(toystory_tag)
print(toystory_tag.shape)

output 3,5

>>> Sample >> toy story inner merge

# Merge the toy_story and taglines tables with a inner join
toystory_tag = toy_story.merge(taglines, on='id')

# Print the rows and shape of toystory_tag
print(toystory_tag)
print(toystory_tag.shape)
output 2,5
